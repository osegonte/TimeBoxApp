//
//  TasksView.swift
//  TimeBoxApp
//
//  ENHANCED: Smart time parsing + template overlay
//

import SwiftUI
import SwiftData

struct TasksView: View {
    @EnvironmentObject private var taskManager: TaskManager
    @EnvironmentObject private var themeManager: ThemeManager
    @State private var newTaskTitle = ""
    @State private var showingTemplateOverlay = false
    @State private var parsedTime: ParsedTime?
    @FocusState private var isInputFocused: Bool
    
    var body: some View {
        NavigationStack {
            ZStack {
                VStack(spacing: 0) {
                    // Progress header
                    ProgressHeaderView()
                    
                    // Error alert display
                    if let errorMessage = taskManager.errorMessage {
                        ErrorBannerView(message: errorMessage) {
                            taskManager.clearError()
                        }
                    }
                    
                    // Loading state
                    if taskManager.isLoading {
                        LoadingView()
                    } else {
                        // Tasks list
                        ScrollView {
                            LazyVStack(spacing: 16) {
                                // To Do section first
                                let incompleteTasks = taskManager.getIncompleteTasks()
                                
                                if !incompleteTasks.isEmpty {
                                    SectionHeaderView(title: "To Do")
                                    
                                    ForEach(incompleteTasks) { task in
                                        TaskRowView(task: task)
                                    }
                                }
                                
                                // Completed tasks second
                                let completedTasks = taskManager.getCompletedTasks()
                                
                                if !completedTasks.isEmpty {
                                    if !incompleteTasks.isEmpty {
                                        Divider()
                                            .padding(.vertical, 8)
                                    }
                                    
                                    SectionHeaderView(title: "Completed Today")
                                    
                                    ForEach(completedTasks) { task in
                                        TaskRowView(task: task)
                                    }
                                }
                                
                                // Empty state
                                if incompleteTasks.isEmpty && completedTasks.isEmpty {
                                    EmptyStateView()
                                }
                            }
                            .padding()
                            .padding(.bottom, 100)
                        }
                    }
                    
                    Spacer()
                    
                    // Bottom input with smart time parsing
                    VStack(spacing: 0) {
                        // Show parsed time chips if detected
                        if let parsed = parsedTime {
                            HStack(spacing: 8) {
                                Image(systemName: "clock")
                                    .font(.caption)
                                    .foregroundColor(.blue)
                                
                                Text(parsed.scheduledDate, format: .dateTime.hour().minute())
                                    .font(.caption)
                                    .foregroundColor(.blue)
                                
                                if !Calendar.current.isDateInToday(parsed.scheduledDate) {
                                    Text(parsed.scheduledDate, format: .dateTime.month().day())
                                        .font(.caption)
                                        .foregroundColor(.blue)
                                }
                                
                                Spacer()
                                
                                Button(action: { parsedTime = nil }) {
                                    Image(systemName: "xmark.circle.fill")
                                        .font(.caption)
                                        .foregroundColor(.gray)
                                }
                            }
                            .padding(.horizontal, 16)
                            .padding(.vertical, 8)
                            .background(Color.blue.opacity(0.1))
                        }
                        
                        Divider()
                            .background(themeManager.secondaryTextColor.opacity(0.3))
                        
                        HStack(spacing: 16) {
                            HStack(spacing: 12) {
                                TextField("Add reminder", text: $newTaskTitle)
                                    .textFieldStyle(.plain)
                                    .focused($isInputFocused)
                                    .onSubmit {
                                        addTask()
                                    }
                                    .onChange(of: newTaskTitle) { _, newValue in
                                        parseTimeFromInput(newValue)
                                    }
                                    .font(.body)
                            }
                            .padding(.horizontal, 16)
                            .padding(.vertical, 12)
                            .background(themeManager.cardBackgroundColor)
                            .cornerRadius(25)
                            
                            Button(action: addTask) {
                                Image(systemName: "plus")
                                    .font(.title3)
                                    .fontWeight(.medium)
                                    .foregroundColor(.white)
                                    .frame(width: 30, height: 30)
                                    .background(
                                        Circle()
                                            .fill(.blue)
                                    )
                            }
                            .disabled(newTaskTitle.trimmingCharacters(in: .whitespaces).isEmpty && !showingTemplateOverlay)
                            .opacity(newTaskTitle.trimmingCharacters(in: .whitespaces).isEmpty && !showingTemplateOverlay ? 0.5 : 1.0)
                            .onLongPressGesture {
                                showingTemplateOverlay = true
                            }
                        }
                        .padding(.horizontal, 16)
                        .padding(.vertical, 12)
                        .background(themeManager.backgroundColor)
                    }
                }
                
                if showingTemplateOverlay {
                    TemplateOverlayView(isShowing: $showingTemplateOverlay) { template in
                        createTaskFromTemplate(template)
                    }
                }
            }
            .background(themeManager.backgroundColor)
            .navigationTitle("Tasks")
            .navigationBarHidden(true)
        }
    }
    
    private func parseTimeFromInput(_ text: String) {
        parsedTime = TimeParser.shared.parseTimeFromText(text)
    }
    
    private func addTask() {
        let cleanTitle = newTaskTitle.trimmingCharacters(in: .whitespaces)
        guard !cleanTitle.isEmpty else { return }
        
        if let parsed = parsedTime {
            // Create task with parsed time
            taskManager.addTask(
                title: parsed.cleanedTitle,
                taskType: .personal,
                scheduledDate: parsed.scheduledDate
            )
            parsedTime = nil
        } else {
            // Create task without specific time
            taskManager.addTask(
                title: cleanTitle,
                taskType: .personal
            )
        }
        
        newTaskTitle = ""
        isInputFocused = true
    }
    
    private func createTaskFromTemplate(_ template: TaskTemplate) {
        taskManager.addTask(
            title: template.name,
            taskType: template.taskType
        )
        showingTemplateOverlay = false
    }
}

// Keep all existing supporting views...
struct TemplateOverlayView: View {
    @Binding var isShowing: Bool
    let onTemplateSelected: (TaskTemplate) -> Void
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        ZStack {
            Color.black.opacity(0.4)
                .ignoresSafeArea()
                .onTapGesture {
                    isShowing = false
                }
            
            VStack(spacing: 20) {
                Text("Choose Template")
                    .font(.headline)
                    .foregroundColor(themeManager.primaryTextColor)
                    .padding()
                    .background(themeManager.cardBackgroundColor)
                    .cornerRadius(12)
                
                LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 16) {
                    ForEach(TaskTemplate.defaultTemplates) { template in
                        TemplateWidgetView(template: template) {
                            onTemplateSelected(template)
                        }
                    }
                }
                .padding()
            }
            .background(themeManager.backgroundColor)
            .cornerRadius(20)
            .padding()
        }
        .transition(.opacity.combined(with: .scale))
        .animation(.spring(response: 0.3, dampingFraction: 0.8), value: isShowing)
    }
}

struct TemplateWidgetView: View {
    let template: TaskTemplate
    let onTap: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            VStack(spacing: 8) {
                Image(systemName: template.icon)
                    .font(.title2)
                    .foregroundColor(template.color)
                
                Text(template.name)
                    .font(.caption)
                    .fontWeight(.medium)
                    .multilineTextAlignment(.center)
                    .lineLimit(2)
                
                Text("\(Int(template.defaultDuration / 60))m")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            .padding()
            .frame(width: 80, height: 80)
            .background(template.color.opacity(0.1))
            .cornerRadius(12)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

struct TaskRowView: View {
    let task: TaskItem
    @EnvironmentObject private var taskManager: TaskManager
    @EnvironmentObject private var themeManager: ThemeManager
    @State private var showingScheduler = false
    @State private var showingDeleteOptions = false
    
    var body: some View {
        HStack(spacing: 12) {
            Button(action: { 
                withAnimation(.spring(response: 0.3, dampingFraction: 0.8)) {
                    taskManager.toggleTaskCompletion(task)
                }
            }) {
                Image(systemName: task.isCompleted ? "checkmark.circle.fill" : "circle")
                    .font(.title3)
                    .foregroundColor(task.isCompleted ? .green : themeManager.secondaryTextColor)
                    .scaleEffect(task.isCompleted ? 1.1 : 1.0)
            }
            
            VStack(alignment: .leading, spacing: 4) {
                HStack {
                    Text(task.title)
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .foregroundColor(task.isCompleted ? themeManager.secondaryTextColor : themeManager.primaryTextColor)
                        .strikethrough(task.isCompleted)
                    
                    Spacer()
                    
                    if let start = task.startTime, let end = task.endTime {
                        Text("\(start, format: .dateTime.hour().minute()) - \(end, format: .dateTime.hour().minute())")
                            .font(.caption2)
                            .fontWeight(.medium)
                            .foregroundColor(.blue)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 2)
                            .background(.blue.opacity(0.1))
                            .cornerRadius(4)
                    }
                }
                
                if !task.notes.isEmpty {
                    Text(task.notes)
                        .font(.caption)
                        .foregroundColor(themeManager.secondaryTextColor)
                        .lineLimit(2)
                }
                
                if task.startTime == nil && !task.isCompleted {
                    HStack(spacing: 4) {
                        Text("Tap to schedule")
                            .font(.caption2)
                            .foregroundColor(.orange)
                    }
                }
            }
            
            Rectangle()
                .fill(task.displayColor)
                .frame(width: 4, height: 40)
                .cornerRadius(2)
        }
        .padding()
        .background(task.isCompleted ? themeManager.cardBackgroundColor.opacity(0.7) : themeManager.cardBackgroundColor)
        .cornerRadius(10)
        .opacity(task.isCompleted ? 0.8 : 1.0)
        .onTapGesture {
            if !task.isCompleted {
                showingScheduler = true
            }
        }
        .onLongPressGesture {
            showingDeleteOptions = true
        }
        .sheet(isPresented: $showingScheduler) {
            NativeSchedulerSheet(task: task)
                .presentationDetents([.height(400)])
                .presentationDragIndicator(.visible)
                .presentationBackground(.regularMaterial)
        }
        .confirmationDialog("Task Options", isPresented: $showingDeleteOptions) {
            Button("Delete Task", role: .destructive) {
                taskManager.deleteTask(task)
            }
            if !task.isCompleted {
                Button("Edit Schedule") {
                    showingScheduler = true
                }
            }
            Button("Cancel", role: .cancel) { }
        } message: {
            Text(task.title)
        }
    }
}

struct ProgressHeaderView: View {
    @EnvironmentObject private var taskManager: TaskManager
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        let progress = taskManager.getTodaysProgress()
        
        VStack(spacing: 8) {
            HStack {
                VStack(alignment: .leading) {
                    Text("Today")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(themeManager.primaryTextColor)
                    
                    Text("\(progress.completed) of \(progress.total) tasks completed")
                        .font(.caption)
                        .foregroundColor(themeManager.secondaryTextColor)
                }
                
                Spacer()
                
                ZStack {
                    Circle()
                        .stroke(themeManager.secondaryTextColor.opacity(0.2), lineWidth: 4)
                        .frame(width: 50, height: 50)
                    
                    Circle()
                        .trim(from: 0, to: progress.percentage)
                        .stroke(Color.blue, style: StrokeStyle(lineWidth: 4, lineCap: .round))
                        .frame(width: 50, height: 50)
                        .rotationEffect(.degrees(-90))
                        .animation(.easeInOut(duration: 0.5), value: progress.percentage)
                    
                    Text("\(Int(progress.percentage * 100))%")
                        .font(.caption2)
                        .fontWeight(.medium)
                        .foregroundColor(themeManager.primaryTextColor)
                }
            }
        }
        .padding()
        .background(themeManager.cardBackgroundColor)
        .cornerRadius(12)
        .padding(.horizontal)
    }
}

struct SectionHeaderView: View {
    let title: String
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        HStack {
            Text(title)
                .font(.title3)
                .fontWeight(.semibold)
                .foregroundColor(themeManager.primaryTextColor)
            
            Spacer()
        }
        .padding(.horizontal, 4)
    }
}

struct ErrorBannerView: View {
    let message: String
    let onDismiss: () -> Void
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        HStack(spacing: 12) {
            Image(systemName: "exclamationmark.triangle.fill")
                .foregroundColor(.orange)
                .font(.headline)
            
            Text(message)
                .font(.subheadline)
                .foregroundColor(themeManager.primaryTextColor)
                .multilineTextAlignment(.leading)
            
            Spacer()
            
            Button(action: onDismiss) {
                Image(systemName: "xmark")
                    .font(.caption)
                    .foregroundColor(themeManager.secondaryTextColor)
            }
        }
        .padding()
        .background(Color.orange.opacity(0.1))
        .cornerRadius(8)
        .padding(.horizontal)
        .transition(.move(edge: .top).combined(with: .opacity))
    }
}

struct LoadingView: View {
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        VStack(spacing: 16) {
            ProgressView()
                .scaleEffect(1.2)
                .progressViewStyle(CircularProgressViewStyle(tint: .blue))
            
            Text("Loading tasks...")
                .font(.subheadline)
                .foregroundColor(themeManager.secondaryTextColor)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(themeManager.backgroundColor)
    }
}

struct NativeSchedulerSheet: View {
    let task: TaskItem
    @EnvironmentObject private var taskManager: TaskManager
    @Environment(\.dismiss) private var dismiss
    
    @State private var selectedDate = Date()
    @State private var selectedTime = Date()
    @State private var duration: Double = 60
    
    var body: some View {
        NavigationStack {
            Form {
                Section {
                    HStack(spacing: 12) {
                        Rectangle()
                            .fill(task.displayColor)
                            .frame(width: 4, height: 30)
                            .cornerRadius(2)
                        
                        Text(task.title)
                            .font(.headline)
                            .lineLimit(1)
                        
                        Spacer()
                    }
                }
                
                Section("Schedule") {
                    DatePicker("Date", selection: $selectedDate, displayedComponents: .date)
                    DatePicker("Time", selection: $selectedTime, displayedComponents: .hourAndMinute)
                    Picker("Duration", selection: $duration) {
                        Text("5 min").tag(5.0)
                        Text("15 min").tag(15.0)
                        Text("30 min").tag(30.0)
                        Text("1 hour").tag(60.0)
                        Text("1.5 hours").tag(90.0)
                        Text("2 hours").tag(120.0)
                        Text("3 hours").tag(180.0)
                    }
                }
                
                Section {
                    let endTime = selectedTime.addingTimeInterval(duration * 60)
                    HStack {
                        Text("Scheduled Time")
                        Spacer()
                        Text("\(selectedTime, format: .dateTime.hour().minute()) - \(endTime, format: .dateTime.hour().minute())")
                            .foregroundColor(.blue)
                            .fontWeight(.medium)
                    }
                }
            }
            .navigationTitle("Schedule Task")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") { dismiss() }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        scheduleTask()
                    }
                    .fontWeight(.semibold)
                }
            }
        }
        .onAppear {
            if let scheduledDate = task.scheduledDate {
                selectedDate = scheduledDate
            }
            if let startTime = task.startTime {
                selectedTime = startTime
                selectedDate = Calendar.current.startOfDay(for: startTime)
            }
            if task.hasScheduledTime {
                duration = task.duration / 60
            }
        }
    }
    
    private func scheduleTask() {
        let calendar = Calendar.current
        let dateComponents = calendar.dateComponents([.year, .month, .day], from: selectedDate)
        let timeComponents = calendar.dateComponents([.hour, .minute], from: selectedTime)
        
        var combinedComponents = DateComponents()
        combinedComponents.year = dateComponents.year
        combinedComponents.month = dateComponents.month
        combinedComponents.day = dateComponents.day
        combinedComponents.hour = timeComponents.hour
        combinedComponents.minute = timeComponents.minute
        
        guard let startTime = calendar.date(from: combinedComponents) else { return }
        let endTime = startTime.addingTimeInterval(duration * 60)
        
        task.scheduledDate = selectedDate
        task.startTime = startTime
        task.endTime = endTime
        
        taskManager.updateTask(task)
        dismiss()
    }
}

struct EmptyStateView: View {
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        VStack(spacing: 16) {
            Image(systemName: "checkmark.circle")
                .font(.system(size: 60))
                .foregroundColor(themeManager.secondaryTextColor.opacity(0.5))
            
            Text("No tasks yet")
                .font(.title3)
                .fontWeight(.medium)
                .foregroundColor(themeManager.primaryTextColor)
            
            Text("Add your first task below or long-press + for templates")
                .font(.body)
                .foregroundColor(themeManager.secondaryTextColor)
                .multilineTextAlignment(.center)
        }
        .padding(.top, 60)
    }
}

#Preview {
    TasksView()
        .environmentObject(TaskManager(context: ModelContext(ModelContainer.preview)))
        .environmentObject(ThemeManager())
        .modelContainer(ModelContainer.preview)
}
