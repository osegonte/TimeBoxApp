//
//  TasksView.swift
//  TimeBoxApp
//
//  FIXED: Added error handling UI and loading states
//

import SwiftUI
import SwiftData

struct TasksView: View {
    @EnvironmentObject private var taskManager: TaskManager
    @EnvironmentObject private var themeManager: ThemeManager
    @State private var newTaskTitle = ""
    @FocusState private var isInputFocused: Bool
    
    var body: some View {
        NavigationStack {
            VStack(spacing: 0) {
                // Progress header
                ProgressHeaderView()
                
                // Error alert display
                if let errorMessage = taskManager.errorMessage {
                    ErrorBannerView(message: errorMessage) {
                        taskManager.clearError()
                    }
                }
                
                // Loading state
                if taskManager.isLoading {
                    LoadingView()
                } else {
                    // Tasks list
                    ScrollView {
                        LazyVStack(spacing: 12) {
                            // Today's scheduled tasks
                            let todaysTasks = taskManager.getTodaysTasks()
                            
                            if !todaysTasks.isEmpty {
                                SectionHeaderView(title: "Today's Schedule", count: todaysTasks.count)
                                
                                ForEach(todaysTasks) { task in
                                    TaskRowView(task: task)
                                }
                            }
                            
                            // ALL tasks (including scheduled ones)
                            let allTasks = taskManager.getAllTasks()
                            
                            if !allTasks.isEmpty {
                                SectionHeaderView(title: "To Do", count: allTasks.count)
                                
                                ForEach(allTasks) { task in
                                    TaskRowView(task: task)
                                }
                            }
                            
                            // Empty state
                            if todaysTasks.isEmpty && allTasks.isEmpty {
                                EmptyStateView()
                            }
                        }
                        .padding()
                        .padding(.bottom, 100)
                    }
                }
                
                Spacer()
                
                // Bottom input
                VStack(spacing: 0) {
                    Divider()
                        .background(themeManager.secondaryTextColor.opacity(0.3))
                    
                    HStack(spacing: 16) {
                        HStack(spacing: 12) {
                            TextField("Add reminder", text: $newTaskTitle)
                                .textFieldStyle(.plain)
                                .focused($isInputFocused)
                                .onSubmit {
                                    addTask()
                                }
                                .font(.body)
                        }
                        .padding(.horizontal, 16)
                        .padding(.vertical, 12)
                        .background(themeManager.cardBackgroundColor)
                        .cornerRadius(25)
                        
                        Button(action: addTask) {
                            Image(systemName: "plus")
                                .font(.title3)
                                .fontWeight(.medium)
                                .foregroundColor(.white)
                                .frame(width: 30, height: 30)
                                .background(
                                    Circle()
                                        .fill(.blue)
                                )
                        }
                        .disabled(newTaskTitle.trimmingCharacters(in: .whitespaces).isEmpty)
                        .opacity(newTaskTitle.trimmingCharacters(in: .whitespaces).isEmpty ? 0.5 : 1.0)
                    }
                    .padding(.horizontal, 16)
                    .padding(.vertical, 12)
                    .background(themeManager.backgroundColor)
                }
            }
            .background(themeManager.backgroundColor)
            .navigationTitle("Tasks")
            .navigationBarHidden(true)
        }
    }
    
    private func addTask() {
        let cleanTitle = newTaskTitle.trimmingCharacters(in: .whitespaces)
        guard !cleanTitle.isEmpty else { return }
        
        taskManager.addTask(
            title: cleanTitle,
            taskType: .personal
        )
        
        newTaskTitle = ""
        isInputFocused = true
    }
}

// NEW: Error banner component
struct ErrorBannerView: View {
    let message: String
    let onDismiss: () -> Void
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        HStack(spacing: 12) {
            Image(systemName: "exclamationmark.triangle.fill")
                .foregroundColor(.orange)
                .font(.headline)
            
            Text(message)
                .font(.subheadline)
                .foregroundColor(themeManager.primaryTextColor)
                .multilineTextAlignment(.leading)
            
            Spacer()
            
            Button(action: onDismiss) {
                Image(systemName: "xmark")
                    .font(.caption)
                    .foregroundColor(themeManager.secondaryTextColor)
            }
        }
        .padding()
        .background(Color.orange.opacity(0.1))
        .cornerRadius(8)
        .padding(.horizontal)
        .transition(.move(edge: .top).combined(with: .opacity))
    }
}

// NEW: Loading view component
struct LoadingView: View {
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        VStack(spacing: 16) {
            ProgressView()
                .scaleEffect(1.2)
                .progressViewStyle(CircularProgressViewStyle(tint: .blue))
            
            Text("Loading tasks...")
                .font(.subheadline)
                .foregroundColor(themeManager.secondaryTextColor)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(themeManager.backgroundColor)
    }
}

// Keep existing components unchanged
struct TaskRowView: View {
    let task: TaskItem
    @EnvironmentObject private var taskManager: TaskManager
    @EnvironmentObject private var themeManager: ThemeManager
    @State private var showingScheduler = false
    @State private var showingDeleteOptions = false
    
    var body: some View {
        HStack(spacing: 12) {
            Button(action: { taskManager.toggleTaskCompletion(task) }) {
                Image(systemName: task.isCompleted ? "checkmark.circle.fill" : "circle")
                    .font(.title3)
                    .foregroundColor(task.isCompleted ? .green : themeManager.secondaryTextColor)
            }
            
            VStack(alignment: .leading, spacing: 4) {
                HStack {
                    Text(task.title)
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .foregroundColor(themeManager.primaryTextColor)
                        .strikethrough(task.isCompleted)
                    
                    Spacer()
                    
                    if let start = task.startTime, let end = task.endTime {
                        Text("\(start, format: .dateTime.hour().minute()) - \(end, format: .dateTime.hour().minute())")
                            .font(.caption2)
                            .fontWeight(.medium)
                            .foregroundColor(.blue)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 2)
                            .background(.blue.opacity(0.1))
                            .cornerRadius(4)
                    }
                }
                
                if !task.notes.isEmpty {
                    Text(task.notes)
                        .font(.caption)
                        .foregroundColor(themeManager.secondaryTextColor)
                        .lineLimit(2)
                }
                
                if task.startTime == nil {
                    HStack(spacing: 4) {
                        Image(systemName: "calendar.badge.plus")
                            .font(.caption2)
                            .foregroundColor(.orange)
                        Text("Tap to schedule")
                            .font(.caption2)
                            .foregroundColor(.orange)
                    }
                }
            }
            
            Rectangle()
                .fill(task.displayColor)
                .frame(width: 4, height: 40)
                .cornerRadius(2)
        }
        .padding()
        .background(themeManager.cardBackgroundColor)
        .cornerRadius(10)
        .opacity(task.isCompleted ? 0.7 : 1.0)
        .onTapGesture {
            showingScheduler = true
        }
        .onLongPressGesture {
            showingDeleteOptions = true
        }
        .sheet(isPresented: $showingScheduler) {
            NativeSchedulerSheet(task: task)
                .presentationDetents([.height(400)])
                .presentationDragIndicator(.visible)
                .presentationBackground(.regularMaterial)
        }
        .confirmationDialog("Task Options", isPresented: $showingDeleteOptions) {
            Button("Delete Task", role: .destructive) {
                taskManager.deleteTask(task)
            }
            Button("Edit Schedule") {
                showingScheduler = true
            }
            Button("Cancel", role: .cancel) { }
        } message: {
            Text(task.title)
        }
    }
}

struct NativeSchedulerSheet: View {
    let task: TaskItem
    @EnvironmentObject private var taskManager: TaskManager
    @EnvironmentObject private var themeManager: ThemeManager
    @Environment(\.dismiss) private var dismiss
    
    @State private var selectedDate = Date()
    @State private var selectedTime = Date()
    @State private var duration: Double = 60
    
    var body: some View {
        NavigationStack {
            Form {
                Section {
                    HStack(spacing: 12) {
                        Rectangle()
                            .fill(task.displayColor)
                            .frame(width: 4, height: 30)
                            .cornerRadius(2)
                        
                        Text(task.title)
                            .font(.headline)
                            .lineLimit(1)
                        
                        Spacer()
                    }
                }
                
                Section("Schedule") {
                    DatePicker("Date", selection: $selectedDate, displayedComponents: .date)
                    DatePicker("Time", selection: $selectedTime, displayedComponents: .hourAndMinute)
                    Picker("Duration", selection: $duration) {
                        Text("5 min").tag(5.0)
                        Text("15 min").tag(15.0)
                        Text("30 min").tag(30.0)
                        Text("1 hour").tag(60.0)
                        Text("1.5 hours").tag(90.0)
                        Text("2 hours").tag(120.0)
                        Text("3 hours").tag(180.0)
                    }
                }
                
                Section {
                    let endTime = selectedTime.addingTimeInterval(duration * 60)
                    HStack {
                        Text("Scheduled Time")
                        Spacer()
                        Text("\(selectedTime, format: .dateTime.hour().minute()) - \(endTime, format: .dateTime.hour().minute())")
                            .foregroundColor(.blue)
                            .fontWeight(.medium)
                    }
                }
            }
            .navigationTitle("Schedule Task")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") { dismiss() }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Save") {
                        scheduleTask()
                    }
                    .fontWeight(.semibold)
                }
            }
        }
        .onAppear {
            if let scheduledDate = task.scheduledDate {
                selectedDate = scheduledDate
            }
            if let startTime = task.startTime {
                selectedTime = startTime
                selectedDate = Calendar.current.startOfDay(for: startTime)
            }
            if task.hasScheduledTime {
                duration = task.duration / 60
            }
        }
    }
    
    private func scheduleTask() {
        let calendar = Calendar.current
        let dateComponents = calendar.dateComponents([.year, .month, .day], from: selectedDate)
        let timeComponents = calendar.dateComponents([.hour, .minute], from: selectedTime)
        
        var combinedComponents = DateComponents()
        combinedComponents.year = dateComponents.year
        combinedComponents.month = dateComponents.month
        combinedComponents.day = dateComponents.day
        combinedComponents.hour = timeComponents.hour
        combinedComponents.minute = timeComponents.minute
        
        guard let startTime = calendar.date(from: combinedComponents) else { return }
        let endTime = startTime.addingTimeInterval(duration * 60)
        
        task.scheduledDate = selectedDate
        task.startTime = startTime
        task.endTime = endTime
        
        taskManager.updateTask(task)
        dismiss()
    }
}

// Keep existing supporting views
struct ProgressHeaderView: View {
    @EnvironmentObject private var taskManager: TaskManager
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        let progress = taskManager.getTodaysProgress()
        
        VStack(spacing: 8) {
            HStack {
                VStack(alignment: .leading) {
                    Text("Today")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(themeManager.primaryTextColor)
                    
                    Text("\(progress.completed) of \(progress.total) tasks completed")
                        .font(.caption)
                        .foregroundColor(themeManager.secondaryTextColor)
                }
                
                Spacer()
                
                ZStack {
                    Circle()
                        .stroke(themeManager.secondaryTextColor.opacity(0.2), lineWidth: 4)
                        .frame(width: 50, height: 50)
                    
                    Circle()
                        .trim(from: 0, to: progress.percentage)
                        .stroke(Color.blue, style: StrokeStyle(lineWidth: 4, lineCap: .round))
                        .frame(width: 50, height: 50)
                        .rotationEffect(.degrees(-90))
                        .animation(.easeInOut, value: progress.percentage)
                    
                    Text("\(Int(progress.percentage * 100))%")
                        .font(.caption2)
                        .fontWeight(.medium)
                        .foregroundColor(themeManager.primaryTextColor)
                }
            }
        }
        .padding()
        .background(themeManager.cardBackgroundColor)
        .cornerRadius(12)
        .padding(.horizontal)
    }
}

struct SectionHeaderView: View {
    let title: String
    let count: Int
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        HStack {
            Text(title)
                .font(.headline)
                .fontWeight(.semibold)
                .foregroundColor(themeManager.primaryTextColor)
            
            Text("(\(count))")
                .font(.caption)
                .foregroundColor(themeManager.secondaryTextColor)
            
            Spacer()
        }
        .padding(.horizontal, 4)
    }
}

struct EmptyStateView: View {
    @EnvironmentObject private var themeManager: ThemeManager
    
    var body: some View {
        VStack(spacing: 16) {
            Image(systemName: "checkmark.circle")
                .font(.system(size: 60))
                .foregroundColor(themeManager.secondaryTextColor.opacity(0.5))
            
            Text("No tasks yet")
                .font(.title3)
                .fontWeight(.medium)
                .foregroundColor(themeManager.primaryTextColor)
            
            Text("Add your first task below")
                .font(.body)
                .foregroundColor(themeManager.secondaryTextColor)
        }
        .padding(.top, 60)
    }
}

#Preview {
    TasksView()
        .environmentObject(TaskManager(context: ModelContext(ModelContainer.preview)))
        .environmentObject(ThemeManager())
        .modelContainer(ModelContainer.preview)
}
